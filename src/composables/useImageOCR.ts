import { ref } from 'vue'

export function useImageOCR() {
  
  const isProcessing = ref(false)
  const progress = ref(0)
  
  // Process image and extract text
  const processImage = async (imageFile: File): Promise<string> => {
    isProcessing.value = true
    progress.value = 0
    
    try {
      // S·ª≠ d·ª•ng dynamic import ƒë·ªÉ tr√°nh l·ªói DataCloneError
      const { createWorker } = await import('tesseract.js')

      console.info('üîç ƒêang kh·ªüi t·∫°o c√¥ng c·ª• nh·∫≠n d·∫°ng...')

      // Trong tesseract.js 6.0.1, createWorker ƒë√£ thay ƒë·ªïi c√°ch s·ª≠ d·ª•ng
      // Truy·ªÅn ng√¥n ng·ªØ tr·ª±c ti·∫øp v√†o createWorker thay v√¨ g·ªçi loadLanguage v√† initialize
      progress.value = 10

      // T·∫°o worker v·ªõi ng√¥n ng·ªØ 'eng' (ti·∫øng Anh)
      const worker = await createWorker('eng')

      progress.value = 40

      // C·∫•u h√¨nh ƒë·ªÉ nh·∫≠n d·∫°ng s·ªë t·ªët h∆°n
      await worker.setParameters({
        tessedit_char_whitelist: '0123456789',
      })

      console.info('üîç ƒêang ph√¢n t√≠ch ·∫£nh...')
      progress.value = 50
      
      // ƒê·ªçc file ·∫£nh
      const imageData = await readImageFile(imageFile)
      
      progress.value = 60
      
      // Nh·∫≠n d·∫°ng vƒÉn b·∫£n
      const { data } = await worker.recognize(imageData)
      
      progress.value = 90
      
      // D·ªçn d·∫πp worker
      await worker.terminate()
      
      progress.value = 100
      
      // Tr√≠ch xu·∫•t s·ªë
      const numbers = data.text.replace(/[^0-9]/g, '')

      if (numbers.length === 0) {
        console.error('‚ùå Kh√¥ng th·ªÉ nh·∫≠n d·∫°ng s·ªë t·ª´ ·∫£nh n√†y!')
        return ''
      }

      console.log('‚úÖ ƒê√£ nh·∫≠n d·∫°ng th√†nh c√¥ng!')
      return numbers
    } catch (error) {
      console.error('OCR Error:', error)
      console.error('‚ùå L·ªói khi x·ª≠ l√Ω ·∫£nh!')
      return ''
    } finally {
      isProcessing.value = false
    }
  }
  
  // Helper function to read image file
  const readImageFile = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader()
      
      reader.onload = () => {
        resolve(reader.result as string)
      }
      
      reader.onerror = () => {
        reject(new Error('Failed to read file'))
      }
      
      reader.readAsDataURL(file)
    })
  }

  return {
    isProcessing,
    progress,
    processImage
  }
} 